package com.example.t10;

import javax.sql.rowset.CachedRowSet;
import javax.sql.rowset.RowSetProvider;
import java.sql.*;

public class DBConnect {
    private static final String FILE_JDBC_URL = "jdbc:h2:~/productdb;DB_CLOSE_DELAY=-1";
    private static final String MEMORY_JDBC_URL = "jdbc:h2:mem:productdb;DB_CLOSE_DELAY=-1";
    private static final String USER = "sa";
    private static final String PASSWORD = "";
    private Connection connection;

    public void connect(boolean inMemory) throws SQLException {
        try {
            Class.forName("org.h2.Driver");
            String url = inMemory ? MEMORY_JDBC_URL : FILE_JDBC_URL;
            connection = DriverManager.getConnection(url, USER, PASSWORD);
            initializeDatabase();
        } catch (ClassNotFoundException e) {
            throw new SQLException("Драйвер H2 не найден", e);
        }
    }

    private void initializeDatabase() throws SQLException {
        if (!tableExists("tags")) {
            executeUpdate("CREATE TABLE tags (id INT PRIMARY KEY, name VARCHAR(255) NOT NULL)");
            executeUpdate("INSERT INTO tags VALUES (1, 'Электроника')");
            executeUpdate("INSERT INTO tags VALUES (2, 'Одежда')");
            executeUpdate("INSERT INTO tags VALUES (3, 'Дом')");
        }

        if (!tableExists("products")) {
            executeUpdate("""
                CREATE TABLE products (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    quantity INT NOT NULL,
                    tag_id INT NOT NULL,
                    FOREIGN KEY (tag_id) REFERENCES tags(id)
                )""");
            executeUpdate("INSERT INTO products (name, quantity, tag_id) VALUES ('Ноутбук', 10, 1)");
            executeUpdate("INSERT INTO products (name, quantity, tag_id) VALUES ('Смартфон', 15, 1)");
            executeUpdate("INSERT INTO products (name, quantity, tag_id) VALUES ('Футболка', 20, 2)");
        }
    }

    private boolean tableExists(String tableName) throws SQLException {
        try (ResultSet rs = connection.getMetaData().getTables(null, null, tableName.toUpperCase(), null)) {
            return rs.next();
        }
    }

    public CachedRowSet executeQuery(String query) throws SQLException {
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            CachedRowSet crs = RowSetProvider.newFactory().createCachedRowSet();
            crs.populate(rs);
            return crs;
        }
    }

    public int executeUpdate(String sql) throws SQLException {
        try (Statement stmt = connection.createStatement()) {
            return stmt.executeUpdate(sql);
        }
    }

    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return connection.prepareStatement(sql);
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return connection.prepareStatement(sql, autoGeneratedKeys);
    }

    public void disconnect() {
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException e) {
                System.err.println("Ошибка при закрытии соединения: " + e.getMessage());
            }
        }
    }

    public Connection getConnection() {
        return connection;
    }
}